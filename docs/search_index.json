[["datacleaning2.html", "6 Data Wrangling and Cleaning (Part II) 6.1 Data Formats (Long and Wide Data) 6.2 Converting the Format of Our Data 6.3 Merging or Joining Data 6.4 Handling Missing Values 6.5 Dealing with Tricky Character Data", " 6 Data Wrangling and Cleaning (Part II) In this session, we are going to learn how to clean more challenging data than what we encountered in Chapter 5. By the end of this session, you should be capable of the following: Understand the concepts of wide and long data and be capable of pivoting (i.e., transforming) from one format to another. Know how to merge together separate data frames into one file that you can clean. Identifying and handling missing data (NA values). Handle character data by knowing how to detect, substitute, or extract pattern in text. 6.1 Data Formats (Long and Wide Data) The vast majority of data that we will encounter in Psychological research will be found in tables (aka Data Frames). However, the format in which that table will be structured can significantly differ in two ways. Namely, the table might be wide or it could be long. Depending on the research software that you use, the raw data that you might download from a study might be in either wide or long table format. It is important to understand the differences between these formats because each format will enable you to conduct certain tasks more easily. Similarly, it is important to know how to effectively and efficiently pivot (i.e., transform or convert) one format into another so that you can perform the specific tasks you need to do on that data. Luckily, R and the tidyverse package is extremely equipped at handling both types of data and at converting from one type to another. In this section, we will first describe what constitutes wide and long data and what advantages each format has over its counterpart. We will then discuss how we can pivot from one data type into another in R. 6.1.1 Defining Long and Wide Data Wide Data In wide data, each row is a unique participant and each column is a separate variable. Table 6.1 shows an example of data in wide format. If I look at each row in the table, it contains all the information on that specific participant across each variable that I collected. I can see that participant 2 is 25 years old, 165 centimeters tall, weighs 60kg, and has a BMI score of 22. Table 6.1: Data in Wide Format ID Age Height Weight BMI 1 30 175 76 24.8 2 25 165 60 22 3 35 185 80 23.4 If you are like most psychologists, you are used to seeing data in wide formats in either Excel or SPSS. The advantage of this format is that it’s easy for humans to scan and read the data, particularly if the amount of variables you have collected is relatively small (if you collected a lot of variables, then you might have to scroll left or right in Excel/SPSS to see all the information on a participant). Additionally, because every participant is in a single row, you minimise the amount of repetition in your data set, again making it easier to read. In terms of statistical analysis, wide data is useful when you want to calculate descriptive statistics (e.g. mean, standard deviations) on the variables (i.e. columns) that you have collected. If the data is in wide format, it is easy to quickly isolate target columns and calculate the mean (e.g., mean(df$Height) would give you the mean of the height column). Certain statistical tests like ANOVA, Linear Regression, and Correlation are easier to compute in R if your data is in wide format. Long Data In long data, each row contains a participant’s single response to a single variable. Table 6.2 shows an example of data in wide format. Instead of having a column for each variable, we have one column that identifies which variable is being measured and the next column identifies their response to that variable. If we collect data on multiple variables, then you have several rows for that participant, with each row telling you a single response to a single variable. Table 6.2: Data in Long Format ID Variable Value 1 Age 30 1 Height 175 1 Weight 76 1 BMI 24.8 2 Age 25 2 Height 165 2 Weight 60 2 BMI 22 3 Age 35 3 Height 185 3 Weight 80 3 BMI 23.4 In Table 6.2, if I look at the first row, I can see that participant 1 was asked their age (Variable) and their answer was 30 (Value). If I want to find out what their answers to the variables Height, Weight, and BMI were, then I would need to look at the rows where ID was equal to 1. It is more difficult to scan long data to quickly capture the information that we need. However, it is often easier for computers and programming languages to work with long data. This is one of the reasons why the concept of Tidy Data discussed in the previous chapter prefers data in the long format - every row contains the minimum amount of information needed rather than “cluttering” rows with lots of information. The preference for long data isn’t only stylistic, long-data format is more suitable for certain forms of analyses. Long data is often more suitable if you are analyzing data in R that involves repeated measures or longitudinal designs, basically any test where we are interested in within-subject variability over time. Similarly, a lot of the packages/functions developed to enable high quality data visualizations were built with the assumption that your data is in long-format. 6.2 Converting the Format of Our Data While it’s important to know the differences between wide and long data formats, do not feel you have to memories every detail or will need to memories which test or which functions requires long or wide data. If you are running a statistical test it’ll be pretty easy to find out what type of format your data needs to be in. If your data is not in the correct format, then the tidyverse package makes it straightforward to convert one format to another, thanks to two functions called: pivot_longer() and pivot_wider(). 6.2.1 Pivoting from Wide to Long The pivot_longer() function enables us to take in a wide data frame and convert it into long format. If you type in the following into your console, information about the function will appear in the Help pane in RStudio1. ?pivot_longer There is a lot of information that will appear in the help section. I want to draw your attention to the Usage section, which contains the arguments (inputs) that we can specify in the pivot_longer() function. There is a lot of potential inputs we can throw in, but I want to highlight the key arguments that you will use most of the time when you use this function Argument Meaning data The wide data frame that you want to convert to long format cols The column(s) that will be moved or altered when you pivot the data frame. names_to The names of each variable identified in cols will be stored in a new column in our long data frame. The names_to argument specifies the name(s) of that new column(s). values_to The values associated with each variable identified in cols will be stored in a new column in our long data frame. The values_to argument specifies the name of that new column. names_prefix names_sep Let’s simulate an example data frame to use pivot_longer. Copy and paste the code below to your R script and run it to create the data frame set.seed(123) wide_df &lt;- data.frame( ID = 1:10, Wellbeing = round(rnorm(n = 10, mean = 4, sd = 0.8), 2), Extraversion = round(rnorm(n = 10, mean = 3, sd = 0.8), 2), Neuroticism = round(rnorm(n = 10, mean = 3, sd = 0.8), 2), Conscientiousness = round(rnorm(n = 10, mean = 3, sd = 0.8), 2), Openness = round(rnorm(n = 10, mean = 3, sd = 0.8), 2) ) head(wide_df) ## ID Wellbeing Extraversion Neuroticism Conscientiousness Openness ## 1 1 3.55 3.98 2.15 3.34 2.44 ## 2 2 3.82 3.29 2.83 2.76 2.83 ## 3 3 5.25 3.32 2.18 3.72 1.99 ## 4 4 4.06 3.09 2.42 3.70 4.74 ## 5 5 4.10 2.56 2.50 3.66 3.97 ## 6 6 5.37 4.43 1.65 3.55 2.10 So we’ve created a wide data frame with 10 participants (5 male, 5 female) with scores on their Extraversion and Neuroticism. Now let’s pivot it to a long data format and create a variable called long_df long_df &lt;- pivot_longer( wide_df, cols = Wellbeing:Openness, #we will pivot everything except ID names_to = &quot;Variable&quot;, values_to = &quot;Response&quot; ) head(long_df) ## # A tibble: 6 × 3 ## ID Variable Response ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Wellbeing 3.55 ## 2 1 Extraversion 3.98 ## 3 1 Neuroticism 2.15 ## 4 1 Conscientiousness 3.34 ## 5 1 Openness 2.44 ## 6 2 Wellbeing 3.82 Nice, we have successfully converted our data from wide to long. We typically do not pivot the ID column, because that enables us to identify which participant’s score each variable. Let’s look at what happens if we do include ID in the cols argument pivot_longer( wide_df, cols = ID:Openness, #pivot everything values_to = &quot;Response&quot; ) ## # A tibble: 60 × 2 ## name Response ## &lt;chr&gt; &lt;dbl&gt; ## 1 ID 1 ## 2 Wellbeing 3.55 ## 3 Extraversion 3.98 ## 4 Neuroticism 2.15 ## 5 Conscientiousness 3.34 ## 6 Openness 2.44 ## 7 ID 2 ## 8 Wellbeing 3.82 ## 9 Extraversion 3.29 ## 10 Neuroticism 2.83 ## # ℹ 50 more rows Now we have lost our record for identifying which participant contributed to which data point. 6.2.2 Pivoting our Remote Associations Data Frame Last week, we cleaned the raw_remote_associations.csv data frame to a variable called df_clean. If we used head(), we’ll see that it is in wide format #if you do not have df_clean in your environment, download the dataset `raw_remote_clean.csv` from the Teams channel, and put in the week 5 folder. #Run the following code to load it in #df_clean &lt;- read.csv(&quot;raw_remote_clean.csv&quot;) head(df_clean) ## ID condition age gender remote_pos remote_neg remote_neut total_mood ## 1 10229436 CAB 26 male 0 2 4 61 ## 2 10230533 CAB 36 female 0 4 4 62 ## 3 10230659 ABC 45 female 0 5 0 74 ## 4 10428518 BCA 37 male 0 9 9 68 ## 5 10229522 CAB 30 female 1 1 0 59 ## 6 10229414 ABC 36 female 1 1 1 63 ## total_openness mean_openness ## 1 16 3.2 ## 2 15 3.0 ## 3 17 3.4 ## 4 14 2.8 ## 5 16 3.2 ## 6 14 2.8 Let’s convert df_clean to the long data format and let’s call it df_clean_long. We are going to put every variable inside the cols function except for ID, condition, and gender. df_clean_long &lt;- pivot_longer(df_clean, cols = c(age, remote_pos:mean_openness), #we select age, and then we select everything from remote_pos to mean_openness in df_clean names_to = &quot;variables&quot;, #this creates a column called `variables` that will tell us the the variable the participant provided data for values_to = &quot;answer&quot;#this creates a column called `answer` that will tell us participants actual answer to each variable ) print(df_clean_long) ## # A tibble: 266 × 5 ## ID condition gender variables answer ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 10229436 CAB male age 26 ## 2 10229436 CAB male remote_pos 0 ## 3 10229436 CAB male remote_neg 2 ## 4 10229436 CAB male remote_neut 4 ## 5 10229436 CAB male total_mood 61 ## 6 10229436 CAB male total_openness 16 ## 7 10229436 CAB male mean_openness 3.2 ## 8 10230533 CAB female age 36 ## 9 10230533 CAB female remote_pos 0 ## 10 10230533 CAB female remote_neg 4 ## # ℹ 256 more rows There we have it! Now our data is long-format. Each row contains a participant’s individuals score on a particular variable. You might be wondering why we did not include the variables condition and gender in our conversion. There is both a technical reason and an data analysis reason for why we did not do this. The technical reason is that we would not be able to have a column that included the values for condition and gender with the values for are other columns like age and total_openness. This is because the data types for these variables are different, as the condition and gender variables include the factor data type, and the other variables are numerical. If you remember from when we discussed vectors (e.g., and remember that every column in a data frame is a lucky vector that found a home), we mentioned that vectors are lines of data where everything in the vector is of the same data type. So if we try pivot_longer on our df_clean data frame, including the gender and condition columns, we get the following error: pivot_longer(df_clean, cols = c(condition:mean_openness), #we try to select everything except ID names_to = &quot;variables&quot;, #this creates a column called `variables` that will tell us the the variable the participant provided data for values_to = &quot;answer&quot;#this creates a column called `answer` that will tell us participants actual answer to each variable ) ## Error in `pivot_longer()`: ## ! Can&#39;t combine `condition` &lt;character&gt; and `age` &lt;integer&gt;. If we wanted to convert every column, then we would need to convert all our columns (except ID) to the same data type. Since it is way easier to convert numeric data to character than vice versa, we could include the argument values_transform to convert everything in our answer column to a character. pivot_longer(df_clean, cols = condition:mean_openness, names_to = &quot;variables&quot;, values_to = &quot;answer&quot;, values_transform = list(answer = as.character) ) ## # A tibble: 342 × 3 ## ID variables answer ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 10229436 condition CAB ## 2 10229436 age 26 ## 3 10229436 gender male ## 4 10229436 remote_pos 0 ## 5 10229436 remote_neg 2 ## 6 10229436 remote_neut 4 ## 7 10229436 total_mood 61 ## 8 10229436 total_openness 16 ## 9 10229436 mean_openness 3.2 ## 10 10230533 condition CAB ## # ℹ 332 more rows I really would not recommend this approach, as this would you would not be able to actually run descriptive and inferential statistical analysis on the answer column without first transforming them back into the numeric data type. 6.2.2.1 Long to Wide Figure 6.1: The arguments that we can pass to the pivot_longer() function Argument Meaning data The wide data frame that you want to convert to long format cols The column that will be pivoted from wide to long. This will be nearly every column in your data frame. The only columns that you would avoid pivoting are the participant ID (if you have it) and any factor (e.g., like the independent variable(s) in your study). names_from So when we pivot from wide to long, any variable that was a column in the wide data frame, will become a value in the long data frame values_from 6.3 Merging or Joining Data 6.4 Handling Missing Values 6.5 Dealing with Tricky Character Data You can use this syntax with every function in R. We haven’t used so far in the course because I personally think the “helpful information” that R gives you is absolute GARBAGE if you are beginner. It tends to be highly technical, minimal, and will often confuse more people than it will help inform.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
